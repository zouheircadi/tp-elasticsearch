[[chapter-correction-dml-full-text-search]]
= Recherches _full-text_

[[chapter-correction-dml-full-text-search-one-field]]
== Recherches sur un champ unique

// tag::dml-fts-match-query-test-case[]
POST /tp_elastic_mq/_bulk
{ "index": { "_id": 1 }}
{"app_name" : "draw pixel art number"}
{ "index": { "_id": 2 }}
{"app_name" : "draw pixel number"}
{ "index": { "_id": 3 }}
{"app_name" : "draw figure"}
// end::dml-fts-match-query-test-case[]


=== Match query
Quels sont les documents qui contiennent le terme draw dans le champ app_name ?

// tag::dml-fts-match-query[]
GET tp_elastic_mq/_search
{
  "query":
  {
    "match": {
      "app_name": "draw"
    }
  }
}
// end::dml-fts-match-query[]

#### Comprendre le score - recherche d’un terme unique
Comment se décompose le score du premier document trouvé pour la requête précédente ?


###### Explain sur tous les documents

// tag::dml-fts-match-query-explain[]
GET tp_elastic_mq/_search?explain=true
{
  "query":
  {
    "match": {
      "app_name": "draw"
    }
  }
}
// end::dml-fts-match-query-explain[]

###### Explain pour le document d'identifiant 3

// tag::dml-fts-match-query-explain-one-tuple[]
GET /tp_elastic_mq/_explain/3
{
  "query":
  {
    "match": {
      "app_name": "draw"
    }
  }
}
// end::dml-fts-match-query-explain-one-tuple[]


Décomposition du score du premier document remonté qui a le score le plus élevé (la sortie JSON détaillée est également indiquée ci-dessous)
// tag::dml-fts-match-query-explain-score-breakdown[]
* 0.15461528 =
* 0,13353139 => idf log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5))
* (*)
*  1,1578947 => tf (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength))
// end::dml-fts-match-query-explain-score-breakdown[]


Résultat de la requête avec un explain

// tag::dml-fts-match-query-explain-one-tuple-result[]
{
  "took" : 26,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : 3,
    "max_score" : 0.15461528,
    "hits" : [
      {
        "_shard" : "[tp_elastic_mq][0]",
        "_node" : "YgaDyGWxQ86eKKynrH5QdQ",
        "_index" : "tp_elastic_mq",
        "_type" : "_doc",
        "_id" : "3",
        "_score" : 0.15461528,
        "_source" : {
          "app_name" : "draw figure"
        },
        "_explanation" : {
          "value" : 0.1546153,
          "description" : "weight(app_name:draw in 2) [PerFieldSimilarity], result of:",
          "details" : [
            {
              "value" : 0.1546153,
              "description" : "score(doc=2,freq=1.0 = termFreq=1.0\n), product of:",
              "details" : [
                {
                  "value" : 0.13353139,
                  "description" : "idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:",
                  "details" : [
                    {
                      "value" : 3.0,
                      "description" : "docFreq",
                      "details" : [ ]
                    },
                    {
                      "value" : 3.0,
                      "description" : "docCount",
                      "details" : [ ]
                    }
                  ]
                },
                {
                  "value" : 1.1578947,
                  "description" : "tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:",
                  "details" : [
                    {
                      "value" : 1.0,
                      "description" : "termFreq=1.0",
                      "details" : [ ]
                    },
                    {
                      "value" : 1.2,
                      "description" : "parameter k1",
                      "details" : [ ]
                    },
                    {
                      "value" : 0.75,
                      "description" : "parameter b",
                      "details" : [ ]
                    },
                    {
                      "value" : 3.0,
                      "description" : "avgFieldLength",
                      "details" : [ ]
                    },
                    {
                      "value" : 2.0,
                      "description" : "fieldLength",
                      "details" : [ ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    ]
  }
}
// end::dml-fts-match-query-explain-one-tuple-result[]


#### OR
Quels sont les documents qui contiennent les termes draw ou art dans le champ app_name ?

// tag::dml-fts-match-query-OR[]
GET tp_elastic_mq/_search
{
  "query":
  {
    "match": {
      "app_name": "draw art"
    }
  }
}
// end::dml-fts-match-query-OR[]

#### Comprendre le score - recherche de plusieurs termes
Comment se décompose le score du premier document trouvé pour la requête OR ?

// tag::dml-fts-match-query-OR-explain[]
GET tp_elastic_mq/_search?explain=true
{
  "query":
  {
    "match": {
      "app_name": "draw art"
    }
  }
}
// end::dml-fts-match-query-OR-explain[]

Décomposition du score du premier document remonté qui a le score le plus élevé

// tag::dml-fts-match-query-OR-explain-score-break-down[]
* 0.9806374 =
* score de draw
* 0.11750762 => (0,13353139 * 0,88)
* (+)
* score de art
* 0.86312973 => (0,98082924 * 0,88)
// end::dml-fts-match-query-OR-explain-score-break-down[]


Résultat de la requête avec un explain (seul le premier document retourné est représenté)

// tag::dml-fts-match-query-OR-explain-result[]
{
  "took" : 497,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : 3,
    "max_score" : 0.12503365,
    "hits" : [
      {
        "_shard" : "[tp_elastic_mq][0]",
        "_node" : "YgaDyGWxQ86eKKynrH5QdQ",
        "_index" : "tp_elastic_mq",
        "_type" : "_doc",
        "_id" : "3",
        "_score" : 0.12503365,
        "_source" : {
          "app_name" : "draw figure"
        },
        "_explanation" : {
          "value" : 0.12503365,
          "description" : "weight(app_name:draw in 2) [PerFieldSimilarity], result of:",
          "details" : [
            {
              "value" : 0.12503365,
              "description" : "score(doc=2,freq=1.0 = termFreq=1.0\n), product of:",
              "details" : [
                {
                  "value" : 0.105360515,
                  "description" : "idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:",
                  "details" : [
                    {
                      "value" : 4.0,
                      "description" : "docFreq",
                      "details" : [ ]
                    },
                    {
                      "value" : 4.0,
                      "description" : "docCount",
                      "details" : [ ]
                    }
                  ]
                },
                {
                  "value" : 1.186722,
                  "description" : "tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:",
                  "details" : [
                    {
                      "value" : 1.0,
                      "description" : "termFreq=1.0",
                      "details" : [ ]
                    },
                    {
                      "value" : 1.2,
                      "description" : "parameter k1",
                      "details" : [ ]
                    },
                    {
                      "value" : 0.75,
                      "description" : "parameter b",
                      "details" : [ ]
                    },
                    {
                      "value" : 3.25,
                      "description" : "avgFieldLength",
                      "details" : [ ]
                    },
                    {
                      "value" : 2.0,
                      "description" : "fieldLength",
                      "details" : [ ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    ]
  }
}
// end::dml-fts-match-query-OR-explain-result[]

#### AND
Quels sont les documents qui contiennent les termes draw et art dans le champ app_name ?

// tag::dml-fts-match-query-AND[]
GET tp_elastic_mq/_search
{
  "query":
  {
    "match":
    {
      "app_name" :
      {
        "query": "draw art",
        "operator": "and"
      }
    }
  }
}
// end::dml-fts-match-query-AND[]


=== Recherches multichamps - un texte spécifique à chaque champ


###### Exemple
// tag::dml-fts-mfq-one-query-per-field-example[]
GET /my_index/_search
{
  "query": {
    "bool": {
      "should": [
        {"match": {"champ1": "text one"}},
        {"match": {"champ2": "text two"}},
        {"match": {"champ3": "text three"}}
      ]
    }
  }
}
// end::dml-fts-mfq-one-query-per-field-example[]




###### Chargement du jeu d'essai


// tag::dml-fts-mfq-one-query-per-field-test-case[]
POST /tp_elastic_mf1/_bulk
{ "index": { "_id": 1 }}
{"app_name" : "draw pixel art number", "genres" : "Art & Design;Creativity"}
{ "index": { "_id": 2 }}
{"app_name" : "draw pixel number", "genres" : "Art & Design"}
{ "index": { "_id": 3 }}
{"app_name" : "draw figure", "genres" : "Art & Design"}
// end::dml-fts-mfq-one-query-per-field-test-case[]


* Trouver les documents qui contiennent
    * draw dans le champ app_name
    * art dans le champ genres


// tag::dml-fts-mfq-one-query-per-field-query[]
GET  tp_elastic_mf1/_search
{
  "query":
  {
    "bool":
    {
      "should":
      [
        {"match": {"app_name": "draw"}},
        {"match": {"genres": "art"}}
      ]
    }
  }
}
// tag::dml-fts-mfq-one-query-per-field-query[]



//step-223-solution - debut
### Recherches multichamps - un texte commun à tous les champs


#### Recherches de type booléen
* Trouver les documents qui contiennent
    * "draw art" dans le champ app_name
    * "draw art" dans le champ genres


// tag::dml-fts-mfq-one-text-for-all-fields-boolean-query[]
GET  tp_elastic_mf1/_search
{
  "query":
  {
    "bool":
    {
      "should":
      [
        {"match": {"app_name": "draw art"}},
        {"match": {"genres": "draw art"}}
      ]
    }
  }
}
// end::dml-fts-mfq-one-text-for-all-fields-boolean-query[]


#### Effets de bord du mode précédent
On recherche les tokens "draw art" dans les documents ci-dessous


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-2[]
POST /tp_elastic_mf2/_bulk
{ "index": { "_id": 1 }}
{"genres" : "Entertainment", "app_name" : "Pixel Draw Art filter for selfies"}
{ "index": { "_id": 2 }}
{"genres" : "Art", "app_name" : "Pixel Draw"}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-2[]


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-2-query[]
GET /tp_elastic_mf2/_search
{
 "query": {
   "bool": {
     "should": [
       {"match": {"genres": "draw art"}},
       {"match": {"app_name": "draw art"}}
     ]
   }
 }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-2-query[]

* score dans l'ordre remonté par la requête

// tag::dml-fts-mfq-one-text-for-all-fields-test-case-2-score[]
|Document ID|      Score  |
|:---------:|:-----------:|
|     2     |  0.9223515  |
|     1     |  0.7268042  |
// end::dml-fts-mfq-one-text-for-all-fields-test-case-2-score[]



Les tokens draw et art sont présents :
* Pour le document d’identifiant 1, tous les deux dans le champ app_name. Ce document peut donc être considéré comme très pertinent en prenant pour hypothèse que l’association et la proximité des mots est importante
* Pour le document d’identifiant 2, art est présent dans le champ genres et draw est présent dans le champ app_name. Le mode de calcul de la pertinence lui attribue ainsi un score plus élevé que le document d'identifiant 1.

Le mode de calcul de la pertinence, tel qu'il est mis en oeuvre dans ce cas présente des effets de bord. On peut ne pas s'en satisfaire.

Comment faire pour que les champs qui contiennent le plus de mots recherchés remontent mieux ? La réponse est dans l’exercice suivant.


##### Recherches de type Dismax


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-2-query-dismax[]
GET /tp_elastic_mf2/_search
{
 "query":
 {
   "dis_max": {
     "queries":
     [
       {"match": {"genres": "art draw"}},
       {"match": {"app_name": "art draw"}}
     ]
   }
 }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-2-query-dismax[]


##### Recherches de type Dismax  - effet de bord


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3[]
POST /tp_elastic_mf3/_bulk
{ "index": { "_id": 1 }}
{"genres" : "Art", "app_name" : "Pixel Draw Number"}
{ "index": { "_id": 2 }}
{"genres" : "Entertainment", "app_name" : "Pixel Draw Art number"}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3[]




// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-side-effect[]
GET /tp_elastic_mf3/_search
{
 "query":
 {
   "dis_max": {
     "queries":
     [
       {"match": {"genres": "entertainment art"}},
       {"match": {"app_name": "entertainment art"}}
     ]
   }
 }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-side-effect[]

* score dans l'ordre remonté par la requête

// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-side-effect-score[]
|Document ID|     Score   |
|:---------:|:-----------:|
|     1     |  0.6931472  |
|     2     |  0.6931472  |
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-side-effect-score[]


Le document 2 contient le terme entertainment dans le champ genres et le terme art dans le champ app_name.
Il est donc plus pertinent que le document 1 qui ne contient que le terme art dans le champ genres.
Or, comme la requête est de type Dismax, seul le score du champ qui matche le mieux est remonté pour un document donné ; le score des autres champs qui matchent n’est pas pris en compte. L’effet cumulatif sur le score en cas de présence simultanée dans plusieurs champs est donc perdu.

La solution pour tenir compte de tous les champs qui matchent est expliquée dans l’exercice suivant.


##### Recherches de type Dismax  avec tiebreaker


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker[]
GET /tp_elastic_mf3/_search
{
 "query":
 {
   "dis_max": {
     "queries":
     [
       {"match": {"genres": "entertainment art"}},
       {"match": {"app_name": "entertainment art"}}
     ],
     "tie_breaker": 0.3
   }
 }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker[]


##### Comprendre le score du mode Dismax

Pour décomposer le score, il faut faire un explain comme indiqué ci-dessous

 * Pour tous les documents


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker-explain[]
GET /tp_elastic_mf3/_search?explain=true
{
  "query":
  {
    "dis_max": {
      "queries":
      [
        {"match": {"genres": "entertainment art"}},
        {"match": {"app_name": "entertainment art"}}
      ],
      "tie_breaker": 0.3
    }
  }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker-explain[]

* Pour le document d'identifiant 2

// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker-explain-doc-2[]
GET /tp_elastic_mf3/_explain/2
{
  "query":
  {
    "dis_max": {
      "queries":
      [
        {"match": {"genres": "entertainment art"}},
        {"match": {"app_name": "entertainment art"}}
      ],
      "tie_breaker": 0.3
    }
  }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker-explain-doc-2[]

Le score se décompose comme suit :

// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker-explain-doc-2-score-break-down[]
* 0.88960975 =
    * 0,6931472 => le tie_breaker ne s'applique pas au champ dont le score est le plus élevé
    *    (+)
    * (tie_breaker * 0,6548752)  => prise en compte du champ de score plus bas multiplié par le tie_breaker

Modulations possibles de l'effet tie_breaker :
* tie_breaker = 0 : le score du document remonté sera celui du champ dont le score est le plus élevé
* tie_breaker = 1 : Suppression de l'effet Dismax
* tie_breaker usuel 0.3 à 0.4
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-dismax-tie-breaker-explain-doc-2-score-break-down[]


##### Queries de type Multimatch


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-multimatch[]
GET /tp_elastic_mf3/_search
{
  "query":
  {
    "multi_match": {
      "type": "best_fields",
      "query": "entertainment art",
      "fields": ["genres","app_name"],
      "tie_breaker": 0.3

    }
  }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-multimatch[]

Selon, le type choisi (most_fields ou cross_fields), ce type de requête propose [d’autres fonctionnalités](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html).

#### Multimatch avec pondération de champs


// tag::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-multimatch-tie-breaker[]
GET /tp_elastic_mf3/_search
{
  "query":
  {
    "multi_match": {
      "query": "entertainment art",
      "type": "best_fields",
      "fields": ["genres^0.3","app_name^4"],
      "tie_breaker": 0.3

    }
  }
}
// end::dml-fts-mfq-one-text-for-all-fields-test-case-3-query-multimatch-tie-breaker[]

La pondération est appelée boost est peut être :
* égale à un entier naturel positif. Dans ce cas, elle augmentera le score
* comprise entre 0 et 1. Dans ce cas, elle réduira le score

Il est possible d'appliquer des boosts différents à chaque champ. Dans l'exemple donné, on applique
* un boost de 4 au champ app_name ce qui augmentera son poids dans le score global du document
* un boost de 0.3 au champ genres ce qui diminuera son poids dans le score global du document


chapter-correction-dml-full-text-search-multi-fields-one-text-4-all-fields
