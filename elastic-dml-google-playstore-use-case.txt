[[chapter-correction-dml-google-playstore-use-case]]
= Google playstore use case

== Chargement initial du fichier de travail

###### Utilisez logstash pour charger le fichier googleplaystore.csv

* Linux

// tag::dml-playstore-use-case-logstash-command-line-linux[]
$LOGSTATSH_INSTALL_DIR/bin/logstash -f <$PATH_TO>/ls-google-playstore.conf
// end::dml-playstore-use-case-logstash-command-line-linux[]

* Windows

// tag::dml-playstore-use-case-logstash-command-line-windows[]
%LOGSTATSH_INSTALL_DIR%\bin\logstash -f C:\elastic\tp-elastic\data\ls-google-playstore.conf
// end::dml-playstore-use-case-logstash-command-line-windows[]



Tester la création de l’index

###### Test de l'existence

// tag::dml-playstore-use-case-head-command[]
HEAD tp_elastic_gstore_v1
// end::dml-playstore-use-case-head-command[]


###### Contrôler le mapping (voir exemple de mapping inféré sur la branche git).

// tag::dml-playstore-use-case-get-command-control-mapping[]
GET tp_elastic_gstore_v1
// end::dml-playstore-use-case-get-command-control-mapping[]


###### Mapping inféré après chargement des données

// tag::dml-playstore-use-case-infered-mapping[]
{
  "tp_elastic_gstore_v1" : {
    "aliases" : { },
    "mappings" : {
      "properties" : {
        "@timestamp" : {
          "type" : "date"
        },
        "android_ver" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "app_name" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "category" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "content_rating" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "current_ver" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "genres" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "installs" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "last_updated" : {
          "type" : "date"
        },
        "price" : {
          "type" : "float"
        },
        "rating" : {
          "type" : "float"
        },
        "reviews" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "size" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "type" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        }
      }
    },
    "settings" : {
      "index" : {
        "creation_date" : "1566987134530",
        "number_of_shards" : "1",
        "number_of_replicas" : "1",
        "uuid" : "HQD0gqrQQI2rLsNjZcaJ6w",
        "version" : {
          "created" : "7030199"
        },
        "provided_name" : "tp_elastic_gstore_v1"
      }
    }
  }
}
// end::dml-playstore-use-case-infered-mapping[]


Faites un count pour compter la totalité des documents de l’index
// tag::dml-playstore-use-case-count[]
GET tp_elastic_gstore_v1/_count
// end::dml-playstore-use-case-count[]


Si la création de l’index est ok, créer un alias appelé tp_elastic_gstore vers l’index tp_elastic_gstore_v1.
// tag::dml-playstore-use-case-create-alias-v1[]
POST /_aliases
{
    "actions" : [
        { "add" : { "index" : "tp_elastic_gstore_v1", "alias" : "tp_elastic_gstore" } }
    ]
}
// end::dml-playstore-use-case-create-alias-v1[]


== Recherches


###### music dans le champ app_name

// tag::dml-playstore-use-case-query-music-app-name[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "match": {
      "app_name": "music"
    }
  }
}
// end::dml-playstore-use-case-query-music-app-name[]

###### diabete dans le champ app_name

// tag::dml-playstore-use-case-query-diabete-app-name[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "match": {
      "app_name": "diabete"
    }
  }
}
// end::dml-playstore-use-case-query-diabete-app-name[]


###### La recherche sur diabete ne donne rien. Pourquoi ?
Utilisation de l'analyzer par défaut qui ne fait pas de stemmisation

###### Refaites la recherche avec le token diabetes

// tag::dml-playstore-use-case-query-diabete-2-plural[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "match": {
      "app_name": "diabetes"
    }
  }
}
// end::dml-playstore-use-case-query-diabete-2-plural[]

###### Comment modifier le mapping pour que la recherche donne un résultat avec le token diabete ?
######
* Il faut utiliser un analyzer personnalisé ou présent sur étagère pour réduire les mots à leur racine. On peut dans un premier temps tester l'effet d'un analyzer english par exemple car le texte indexé est dans la langue anglaise
*  Dans l'analyse indiquée ci-dessous, on constate que les tokens diabetes et diabete sont réduits à la racine diabete. L'analyzer english présent sur étagère est donc suffisant pour répondre à ce problème

###### Comment pouvez vous faire des tests d’une solution probable ?
* Endpoint _analyze avec un un analyzer présent sur étagère

// tag::dml-playstore-use-case-query-diabete-2-plural-analysis[]
GET /tp_elastic_gstore/_analyze
{
  "text": ["diabetes","diabete"],
  "analyzer": "english"
}
// end::dml-playstore-use-case-query-diabete-2-plural-analysis[]


###### Modifier le mapping pour que la recherche donne un résultat avec le token diabete ?

Créer l'index

// tag::dml-playstore-use-case-index-create-v2[]
PUT tp_elastic_gstore_v2
{
  "mappings":
  {
        "properties" :
        {
          "app_name" :
          {
            "type" : "text",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              }
            }
          },
          "genres" :
          {
            "type" : "text",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              }
            }
          }
        }
  }
}
// end::dml-playstore-use-case-index-create-v2[]

- Créer l'alias sur le nouvel index
* Créer l'alias

// tag::dml-playstore-use-case-index-alias-v2[]
POST /_aliases
{
    "actions" : [
        { "remove": { "index" : "tp_elastic_gstore_v1", "alias" : "tp_elastic_gstore" } },
        { "add"   : { "index" : "tp_elastic_gstore_v2", "alias" : "tp_elastic_gstore" } }
    ]
}
// end::dml-playstore-use-case-index-alias-v2[]


###### Tester la solution choisie avec le endpoint _analyze avant de la mettre en oeuvre (avant le chargement des données).
// tag::dml-playstore-use-case-index-v2-analysis[]
GET /tp_elastic_gstore/_analyze
{
  "text": ["diabetes","diabete"],
  "field": "app_name.english"
}
// end::dml-playstore-use-case-index-v2-analysis[]



###### Rechercher de nouveau le token diabete. La recherche devrait être fructueuse si vous avez choisi le mapping adequat
// tag::dml-playstore-use-case-index-v2-query-diabete-on-multifield[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "match": {
      "app_name.english": "diabete"
    }
  }
}
// end::dml-playstore-use-case-index-v2-query-diabete-on-multifield[]


###### Ré-écrivez la requête en recherchant simultanément sur les champs que vous estimez pertinents tout en boostant les recherches des saisies exactes des utilisateurs.

// tag::dml-playstore-use-case-index-v2-query-diabete-multimatch[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "multi_match": {
      "query": "diabetes",
      "fields": ["app_name^4","app_name.english","genres.english"]
    }
  }
}
// end::dml-playstore-use-case-index-v2-query-diabete-multimatch[]



###### Rechercher les documents qui contiennent draw ou art dans le champ app_name
// tag::dml-playstore-use-case-index-v2-query-or-operator[]
GET /tp_elastic_gstore/_search
{
  "query": {
      "match": {
        "app_name": "draw art"
      }
  }
}
// end::dml-playstore-use-case-index-v2-query-or-operator[]

###### Rechercher les documents qui contiennent draw et art dans le champ app_name
// tag::dml-playstore-use-case-index-v2-query-and-operator[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
      "match":
      {
        "app_name":
        {
          "query": "draw art",
          "operator": "and"
        }
      }
  }
}
// end::dml-playstore-use-case-index-v2-query-and-operator[]


###### Rechercher les documents qui contiennent
* diabète  dans le champ description
* pour les applications gratuites
* qui ont un rating supérieur à 4.5
* qui ont été mises à jour (last_updated) en 2019

// tag::dml-playstore-use-case-index-v2-query-diabete-with-filters[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "bool":
    {
      "must":
      [
        {"multi_match": {
          "query": "diabete",
          "fields": ["app_name^4","app_name.english"]
        }}
      ],
      "filter":
      [
        {
          "term": {
            "type.keyword": "Free"
          }
        },
        {
          "range" : {
            "rating" : {
              "gte" : 4.5
            }
          }
        },
        {
          "range" : {
            "last_updated" : {
              "gte" : "2018-01-01"
            }
          }
        }
      ]
    }
  }
}
// end::dml-playstore-use-case-index-v2-query-diabete-with-filters[]

###### Rechercher les documents qui contiennent messaging+ dans le champ app_name
// tag::dml-playstore-use-case-index-v2-query-messaging-plus[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "multi_match": {
      "query": "messaging+",
      "fields": ["app_name"]
    }
  }
}
// end::dml-playstore-use-case-index-v2-query-messaging-plus[]


* On cherche messaging+ mais c’est messaging qui remonte en premier

###### Modification du mapping

# DELETE ALL INDEXES
DELETE tp_elastic_gstore_*

- Créer l'index

// tag::dml-playstore-use-case-index-create-v3[]
PUT tp_elastic_gstore_v3
{
  "settings":
  {
    "analysis":
    {
      "analyzer":
      {
        "ws_analyzer":
        {
          "type": "custom",
          "tokenizer": "whitespace",
          "filter":
          [
            "lowercase"
          ]
        }
      }
    }
  },
  "mappings":
  {
        "properties" :
        {
          "app_name" :
          {
            "type" : "text",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              },
              "whitespace" :
              {
                "type" : "text",
                "analyzer" : "ws_analyzer"
              }
            }
          },
          "genres" :
          {
            "type" : "text",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              }
            }
          }
        }
  }
}
// end::dml-playstore-use-case-index-create-v3[]

- Créer alias

// tag::dml-playstore-use-case-index-alias-v3[]
POST /_aliases
{
    "actions" : [
        { "remove": { "index" : "tp_elastic_gstore_v2", "alias" : "tp_elastic_gstore" } },
        { "add"   : { "index" : "tp_elastic_gstore_v3", "alias" : "tp_elastic_gstore" } }
    ]
}
// end::dml-playstore-use-case-index-alias-v3[]


###### Tester le nouveau mapping avant le chargement des données

// tag::dml-playstore-use-case-index-v3-analysis[]
GET /tp_elastic_gstore/_analyze
{
  "text": ["messaging+","messaging"],
  "field": "app_name.whitespace"
}
// end::dml-playstore-use-case-index-v3-analysis[]

- Charger les données

*  Une recherche du token messaging+ ne trouve que les documents contenant cette chaîne

// tag::dml-playstore-use-case-index-v3-query-messaging-plus-exclusive[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "multi_match": {
      "query": "messaging+",
      "fields": ["app_name.whitespace"]
    }
  }
}
// end::dml-playstore-use-case-index-v3-query-messaging-plus-exclusive[]

* Lors d’une recherche du token messaging+, les documents le contenant remontent en premier

// tag::dml-playstore-use-case-index-v3-query-messaging-plus-broader[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "multi_match": {
      "query": "messaging+",
      "fields": ["app_name","app_name.english","app_name.whitespace"]
    }
  }
}
// end::dml-playstore-use-case-index-v3-query-messaging-plus-broader[]


###### Rechercher les documents qui contiennent le token food dans le champ "category"

// tag::dml-playstore-use-case-index-v3-query-food-category-field[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "multi_match": {
      "query": "food",
      "fields": ["category"],
      "type": "best_fields"
    }
  }
}
// end::dml-playstore-use-case-index-v3-query-food-category-field[]


###### La recherche devrait être infructueuse. Comment elargir le spectre de la recherche sans modification du mapping.


// tag::dml-playstore-use-case-index-v3-query-food-more-fields[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "multi_match": {
      "query": "food",
      "fields": ["category","app_name","genres"]
    }
  }
}
// end::dml-playstore-use-case-index-v3-query-food-more-fields[]

###### Modification du mapping

```shell
DELETE tp_elastic_gstore_*
```

// tag::dml-playstore-use-case-index-create-v4[]
PUT tp_elastic_gstore_v4
{
  "settings":
  {
    "analysis":
    {
      "analyzer":
      {
        "ws_analyzer":
        {
          "type": "custom",
          "tokenizer": "whitespace",
          "filter":
          [
            "lowercase"
          ]
        }
      }
    }
  },
  "mappings":
  {
        "properties" :
        {
          "app_name" :
          {
            "type" : "text",
            "copy_to" : "catch_all",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              },
              "whitespace" :
              {
                "type" : "text",
                "analyzer" : "ws_analyzer"
              }
            }
          },
          "genres" :
          {
            "type" : "text",
            "copy_to" : "catch_all",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              }
            }
          },
          "category" :
          {
            "type" : "text",
            "copy_to" : "catch_all",
            "fields" :
            {
              "keyword" :
              {
                "type" : "keyword"
              }
            }
          },
          "catch_all" :
          {
            "type" : "text"
          }
        }
  }
}
// end::dml-playstore-use-case-index-create-v4[]

Créer alias

// tag::dml-playstore-use-case-index-alias-v4[]
POST /_aliases
{
    "actions" : [
        { "remove": { "index" : "tp_elastic_gstore_v3", "alias" : "tp_elastic_gstore" } },
        { "add"   : { "index" : "tp_elastic_gstore_v4", "alias" : "tp_elastic_gstore" } }
    ]
}
// end::dml-playstore-use-case-index-alias-v4[]

- Charger les données

Query sur le champ catch_all

// tag::dml-playstore-use-case-index-v4-query-food-catch-all-field[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "match": {
      "catch_all": "food"
    }
  }
}
// end::dml-playstore-use-case-index-v4-query-food-catch-all-field[]


###### dyabete

// tag::dml-playstore-use-case-index-v4-query-dyabete-fuziness[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "multi_match": {
      "query": "dyabetes",
      "fields": ["category","app_name","app_name.english","genres","genres.english"],
      "fuzziness": "AUTO"
    }
  }
}
// end::dml-playstore-use-case-index-v4-query-dyabete-fuziness[]

###### searchAsYouType

* Supprimer les index existants
```shell
DELETE tp_elastic_gstore_*
```

* Créer l'index de travail tp_elastic_gstore_v5

// tag::dml-playstore-use-case-index-create-v5[]
PUT tp_elastic_gstore_v5
{
  "settings":
  {
    "analysis":
    {
      "filter" :
      {
        "ac_filter" :
        {
          "type": "edge_ngram",
          "min_gram": 1,
          "max_gram": 10
        }
      },
      "analyzer":
      {
        "ws_analyzer":
        {
          "type": "custom",
          "tokenizer": "whitespace",
          "filter":
          [
            "lowercase"
          ]
        },
        "ac_analyzer" :
        {
          "tokenizer" : "standard",
          "filter" :
          ["lowercase", "ac_filter"]
        }
      }
    }
  },
  "mappings":
  {
        "properties" :
        {
          "app_name" :
          {
            "type" : "text",
            "copy_to" : "catch_all",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              },
              "whitespace" :
              {
                "type" : "text",
                "analyzer" : "ws_analyzer"
              },
              "autocomplete" :
              {
                "type" : "text",
                "analyzer": "ac_analyzer",
                "search_analyzer" : "standard"
              }
            }
          },
          "genres" :
          {
            "type" : "text",
            "copy_to" : "catch_all",
            "fields" :
            {
              "english" :
              {
                "type" : "text",
                "analyzer" : "english"
              },
              "autocomplete" :
              {
                "type" : "text",
                "analyzer": "ac_analyzer",
                "search_analyzer" : "standard"
              }
            }
          },
          "category" :
          {
            "type" : "text",
            "copy_to" : "catch_all",
            "fields" :
            {
              "keyword" :
              {
                "type" : "keyword"
              },
              "autocomplete" :
              {
                "type" : "text",
                "analyzer": "ac_analyzer",
                "search_analyzer" : "standard"
              }
            }
          },
          "catch_all" :
          {
            "type" : "text"
          }
        }
  }
}
// end::dml-playstore-use-case-index-create-v5[]


* Créer alias
** L'alias tp_elastic_gstore va pointer sur l'index tp_elastic_gstore_v5

// tag::dml-playstore-use-case-index-alias-v5[]
POST /_aliases
{
    "actions" : [
        { "remove": { "index" : "tp_elastic_gstore_v4", "alias" : "tp_elastic_gstore" } },
        { "add"   : { "index" : "tp_elastic_gstore_v5", "alias" : "tp_elastic_gstore" } }
    ]
}
// end::dml-playstore-use-case-index-alias-v5[]

* Tester l'index avant chargement des données
// tag::dml-playstore-use-case-index-v5-analysis[]
GET /tp_elastic_gstore/_analyze
{
  "text" : ["dating","diabete"],
  "field": "app_name.autocomplete"
}
// end::dml-playstore-use-case-index-v5-analysis[]


- Charger les données


* Exécuter une requête de test

// tag::dml-playstore-use-case-index-v5-query-autocomplete[]
GET /tp_elastic_gstore/_search
{
  "query":
  {
    "match": {
      "app_name.autocomplete": "D"
    }
  }
}
// end::dml-playstore-use-case-index-v5-query-autocomplete[]